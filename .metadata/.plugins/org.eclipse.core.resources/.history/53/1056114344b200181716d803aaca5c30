package com.isoftstone.platform.utils;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;

/**
 * excel读写工具类
 * 
 * @author liqiang
 */
public class POIUtil
{
    private static Logger logger = Logger.getLogger(POIUtil.class);

    private final static String xls = "xls";

    private final static String xlsx = "xlsx";

    /**
     * 读入excel文件，解析后返回 （n：数据从第n行开始读取）
     * 
     * @param file
     * @throws IOException
     */
    public static List<String[]> readExcel(MultipartFile file, int n) throws IOException
    {
        // 检查文件
        checkFile(file);
        // 获得Workbook工作薄对象
        Workbook workbook = getWorkBook(file);
        // 创建返回对象，把每行中的值作为一个数组，所有行作为一个集合返回
        List<String[]> list = new ArrayList<String[]>();
        if (workbook != null)
        {
            for (int sheetNum = 0; sheetNum < 1; sheetNum++)
            {
                // 获得当前sheet工作表
                Sheet sheet = workbook.getSheetAt(sheetNum);
                if (sheet == null)
                {
                    continue;
                }
                // 获得当前sheet的开始行
                int firstRowNum = sheet.getFirstRowNum();
                // 获得当前sheet的结束行
                int lastRowNum = sheet.getLastRowNum();
                int cellAll = sheet.getRow(1).getPhysicalNumberOfCells();
                // 循环第n行之后的所有行
                for (int rowNum = firstRowNum + n; rowNum <= lastRowNum; rowNum++)
                {
                    // 获得当前行
                    Row row = sheet.getRow(rowNum);
                    if (row == null)
                    {
                        continue;
                    }
                    // 获得当前行的开始列
                    int firstCellNum = row.getFirstCellNum();
                    String[] cells = new String[cellAll];
                    // 循环当前行
                    for (int cellNum = firstCellNum; cellNum < cellAll; cellNum++)
                    {
                        Cell cell = row.getCell(cellNum);
                        cells[cellNum] = cell == null ? "" : getCellValue(cell);
                    }
                    list.add(cells);
                }
            }
            // ((InputStream) workbook).close();
        }
        return list;
    }

    public static void checkFile(MultipartFile file) throws IOException
    {
        // 判断文件是否存在
        if (null == file)
        {
            logger.error("文件不存在！");
            throw new FileNotFoundException("文件不存在！");
        }
        // 获得文件名
        String fileName = file.getOriginalFilename();
        // 判断文件是否是excel文件
        if (!fileName.endsWith(xls) && !fileName.endsWith(xlsx))
        {
            logger.error(fileName + "不是excel文件");
            throw new IOException(fileName + "不是excel文件");
        }
    }

    public static Workbook getWorkBook(MultipartFile file)
    {
        // 获得文件名
        String fileName = file.getOriginalFilename();
        // 创建Workbook工作薄对象，表示整个excel
        Workbook workbook = null;
        try
        {
            // 获取excel文件的io流
            InputStream is = file.getInputStream();
            // 根据文件后缀名不同(xls和xlsx)获得不同的Workbook实现类对象
            if (fileName.endsWith(xls))
            {
                // 2003
                workbook = new HSSFWorkbook(is);
            }
            else if (fileName.endsWith(xlsx))
            {
                // 2007
                workbook = new XSSFWorkbook(is);
            }
        }
        catch (IOException e)
        {
            logger.info(e.getMessage());
        }
        return workbook;
    }

    public static String getCellValue(Cell cell)
    {
        String cellValue = "";
        if (cell == null)
        {
            return cellValue;
        }
        // 把数字当成String来读，避免出现1读成1.0的情况
        if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC)
        {
            cell.setCellType(Cell.CELL_TYPE_STRING);
        }
        // 判断数据的类型
        switch (cell.getCellType())
        {
            case Cell.CELL_TYPE_NUMERIC: // 数字
                double numCellValue = cell.getNumericCellValue();
                // String format = new DecimalFormat("#").format(numCellValue);
                cellValue = new DecimalFormat("#").format(numCellValue);
                break;
            case Cell.CELL_TYPE_STRING: // 字符串
                cellValue = String.valueOf(cell.getStringCellValue());
                break;
            case Cell.CELL_TYPE_BOOLEAN: // Boolean
                cellValue = String.valueOf(cell.getBooleanCellValue());
                break;
            case Cell.CELL_TYPE_FORMULA: // 公式
                cellValue = String.valueOf(cell.getCellFormula());
                break;
            case Cell.CELL_TYPE_BLANK: // 空值
                cellValue = "";
                break;
            case Cell.CELL_TYPE_ERROR: // 故障
                cellValue = "非法字符";
                break;
            default:
                cellValue = "未知类型";
                break;
        }
        return cellValue;
    }

    public static Sheet getSheet(int sheetNum, XSSFWorkbook workbook)
    {
        return workbook == null ? null : workbook.getSheetAt(0);
    }

    public static void setCellValue(Sheet sheet, int rowNum, int cellNum, String cellValue)
    {
        Row row = sheet.getRow(rowNum);
        if (row == null)
        {
            row = sheet.createRow(rowNum);
        }
        Cell cell = row.getCell(cellNum);
        if (cell == null)
        {
            cell = row.createCell(cellNum);
        }
        cell.setCellValue(cellValue);
    }
    
    /**
     * 查询某年某月有多少天
     *
     * @param
     * @param
     * @return
     */
    public static int days(String queryDate)
    {

        int year = Integer.valueOf(queryDate.split("-")[0]);
        int month = Integer.valueOf(queryDate.split("-")[1]);
        int days = 0;
        if (month != 2)
        {
            switch (month)
            {
                case 1:
                case 3:
                case 5:
                case 7:
                case 8:
                case 10:
                case 12:
                    days = 31;
                    break;
                case 4:
                case 6:
                case 9:
                case 11:
                    days = 30;

            }
        }
        else
        {
            // 闰年
            if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)
                days = 29;
            else
                days = 28;
        }
        return days;
    }

    /**
     * 请输入日期(格式：yyyy-MM-dd)
     * 
     * @param date
     * @return
     */
    public static String getWeekDay(String date)
    {

        String weekStr = "";
        try
        {
            Calendar ca = Calendar.getInstance();
            ca.setTime(new SimpleDateFormat("yyyy-MM-dd").parse(date));
            int week = ca.get(Calendar.DAY_OF_WEEK);

            switch (week)
            {
                case 1:
                    weekStr = "周日";
                    break;
                case 2:
                    weekStr = "周一";
                    break;
                case 3:
                    weekStr = "周二";
                    break;
                case 4:
                    weekStr = "周三";
                    break;
                case 5:
                    weekStr = "周四";
                    break;
                case 6:
                    weekStr = "周五";
                    break;
                case 7:
                    weekStr = "周六";
                    break;
                default:
                    weekStr = "未知";
                    break;
            }
            // System.out.println(String.format("%s是%s", date, weekStr));
        }
        catch (Exception e)
        {
            System.out.println("日期格式错误！");
        }
        return weekStr;

    }
    
}