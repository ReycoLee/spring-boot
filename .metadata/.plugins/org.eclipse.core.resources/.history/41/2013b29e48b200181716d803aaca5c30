package com.tabao.core.utils;

import org.apache.commons.lang.StringUtils;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

/**
 * Redis 缓存池
 * 
 * @author zhangz 48505
 */
public class JedisPoolUtils
{
    private static JedisPool pool;

    /**
     * 建立连接池 真实环境，一般把配置参数缺抽取出来。
     * 
     */
    private static void createJedisPool()
    {

        // 建立连接池配置参数
        JedisPoolConfig config = new JedisPoolConfig();

        // 设置最大连接数
        config.setMaxTotal(300);

        // 设置最大阻塞时间，记住是毫秒数milliseconds
        config.setMaxWaitMillis(10000);

        // 设置空间连接
        config.setMaxIdle(100);

        config.setTestOnBorrow(true);

        if (StringUtils.isNotEmpty(SysConfig.getRedisAuth()))
        {
            // 创建连接池new JedisPool(poolConfig, host, port, timeout, password)
            pool = new JedisPool(config, SysConfig.getRedisHost(), SysConfig.getRedisPort(), 10000,
                    SysConfig.getRedisAuth());
        }
        else
        {
            pool = new JedisPool(config, SysConfig.getRedisHost(), SysConfig.getRedisPort(), 10000);
        }

    }

    /**
     * 在多线程环境同步初始化
     */
    private static synchronized void poolInit()
    {
        if (pool == null)
        {
            createJedisPool();
        }
    }

    /**
     * 获取一个jedis 对象
     * 
     * @return
     */
    public static Jedis getJedis()
    {
        if (pool == null)
        {
            poolInit();
        }
        return pool.getResource();
    }

    /**
     * 关闭连接
     * 
     * @param jedis
     */
    public static void returnResource(Jedis jedis)
    {
        pool.returnResourceObject(jedis);
    }
}
